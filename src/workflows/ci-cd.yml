name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ============================================================================
  # Quality Checks
  # ============================================================================
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üìö Install dependencies
        run: npm ci

      - name: üîç Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: üîé Run TypeScript type check
        run: npm run type-check
        continue-on-error: false

      - name: üß™ Run tests
        run: npm run test
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: üìä Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: üèóÔ∏è Build project
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: üì¶ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 7

  # ============================================================================
  # Security Scan
  # ============================================================================
  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üîí Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: üõ°Ô∏è Run security scan
        run: |
          npm install -g snyk
          snyk test --severity-threshold=high || true
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # ============================================================================
  # Database Backup (Production only)
  # ============================================================================
  database-backup:
    name: Backup Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: üíæ Backup database
        run: |
          mkdir -p backups
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="backups/db_backup_${TIMESTAMP}.sql"
          
          echo "üì¶ Creating database backup..."
          supabase db dump --db-url "${{ secrets.SUPABASE_DB_URL }}" > "$BACKUP_FILE"
          
          echo "‚úÖ Backup created: $BACKUP_FILE"
          echo "backup_file=$BACKUP_FILE" >> $GITHUB_OUTPUT
        id: backup

      - name: ‚òÅÔ∏è Upload backup to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-${{ github.sha }}
          path: backups/*.sql
          retention-days: 90

      - name: üìù Record backup metadata
        run: |
          echo "Backup created at: $(date)" > backups/metadata.txt
          echo "Commit: ${{ github.sha }}" >> backups/metadata.txt
          echo "Branch: ${{ github.ref_name }}" >> backups/metadata.txt

  # ============================================================================
  # Deploy to Staging
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    needs: [quality-checks, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    timeout-minutes: 15
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üìö Install Vercel CLI
        run: npm install -g vercel@latest

      - name: üîÑ Pull Vercel environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: üèóÔ∏è Build for Vercel
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL_STAGING }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY_STAGING }}

      - name: üöÄ Deploy to Vercel (Staging)
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to: $URL"

      - name: üìä Run smoke tests
        run: |
          npm run test:e2e:staging || true
        continue-on-error: true

      - name: üí¨ Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Staging deployment ready!\n\n**Preview URL:** ${{ steps.deploy.outputs.url }}\n\n‚úÖ All checks passed`
            })

  # ============================================================================
  # Deploy to Production
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    needs: [quality-checks, security-scan, database-backup]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 20
    environment:
      name: production
      url: https://estal.vercel.app

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üìö Install Vercel CLI
        run: npm install -g vercel@latest

      - name: üîÑ Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: üèóÔ∏è Build for Vercel
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

      - name: üöÄ Deploy to Vercel (Production)
        id: deploy
        run: |
          URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Production deployed to: $URL"

      - name: üè• Health check
        run: |
          echo "Running health checks..."
          sleep 10
          curl -f "${{ steps.deploy.outputs.url }}" || exit 1
          echo "‚úÖ Health check passed"

      - name: üìä Record deployment
        run: |
          curl -X POST "${{ secrets.VITE_SUPABASE_URL }}/functions/v1/make-server-96250128/deployments" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "environment": "production",
              "status": "success",
              "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "deployed_by": "${{ github.actor }}",
              "commit_message": "${{ github.event.head_commit.message }}"
            }' || true

      - name: üè∑Ô∏è Create release tag
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = `v${new Date().toISOString().split('T')[0].replace(/-/g, '.')}-${context.sha.substring(0, 7)}`;
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });
            console.log(`Created tag: ${tagName}`);

  # ============================================================================
  # Notify Deployment Status
  # ============================================================================
  notify:
    name: Send Notifications
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: üìß Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: |
            ${{ needs.deploy-production.result == 'success' && '‚úÖ' || '‚ùå' }} 
            Estal Deployment ${{ needs.deploy-production.result }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: Estal CI/CD <noreply@estal.com>
          body: |
            Deployment Status: ${{ needs.deploy-production.result }}
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
            
            View workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        continue-on-error: true

      - name: üí¨ Send Slack notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "${{ needs.deploy-production.result == 'success' && '‚úÖ Production deployment successful!' || '‚ùå Production deployment failed!' }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Estal Platform Deployment*\n\n*Status:* ${{ needs.deploy-production.result }}\n*Environment:* Production\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # ============================================================================
  # Post-Deployment Monitoring
  # ============================================================================
  post-deployment-monitoring:
    name: Monitor Deployment
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: üìä Monitor error rates
        run: |
          echo "Monitoring error rates for 5 minutes..."
          sleep 300
          
          # Check error rate via API
          ERROR_RATE=$(curl -s "${{ secrets.VITE_SUPABASE_URL }}/functions/v1/make-server-96250128/metrics/error-rate" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" | jq -r '.rate')
          
          if (( $(echo "$ERROR_RATE > 0.05" | bc -l) )); then
            echo "‚ö†Ô∏è High error rate detected: $ERROR_RATE"
            exit 1
          fi
          
          echo "‚úÖ Error rate normal: $ERROR_RATE"
        continue-on-error: true

      - name: üìà Check performance metrics
        run: |
          echo "Checking performance metrics..."
          
          # Monitor response times
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' https://estal.vercel.app)
          
          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "‚ö†Ô∏è Slow response time: ${RESPONSE_TIME}s"
          else
            echo "‚úÖ Response time normal: ${RESPONSE_TIME}s"
          fi
        continue-on-error: true
